{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This is the official documentation for Zynk, a language designed primarily for educational purposes and exploration. Zynk is not intended for production use but serves as an interesting platform for learning and experimenting with C++.</p>"},{"location":"#features","title":"\ud83c\udf1f Features","text":"<ul> <li> <p>Interpreted Language: Zynk is an interpreted language, designed to speed up development and testing cycles. With its interactive environment, you can quickly prototype and debug your code without the need for lengthy compile times.</p> </li> <li> <p>Turing-Complete: Zynk adheres to the Turing-complete classification, meaning it can express any computable function. This makes Zynk a versatile tool for solving a wide range of problems, from simple scripts to complex algorithms.</p> </li> <li> <p>C++ Backend: Written in C++, Zynk combines the high performance and efficiency of C++ with a user-friendly interface. This hybrid approach ensures that your applications run swiftly while remaining easy to develop and maintain.</p> </li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>To get started with Zynk, follow these steps:</p> <ol> <li>Installation: Download and install the latest version of Zynk from Installation Guide.</li> <li>Hello World: Write your first Zynk program with Hello World Tutorial.</li> </ol>"},{"location":"#language-reference","title":"\ud83d\udd0d Language Reference","text":"<p>Dive into the specifics of Zynk\u2019s syntax and semantics:</p> <ul> <li>Basic Syntax: Learn the fundamental rules and conventions of Zynk syntax in Basic Examples.</li> <li>Data Types: Explore the different data types available in Zynk and how to use them effectively in Data Types.</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions to Zynk are welcome. Learn how to contribute on Contribution Guidelines.</p>"},{"location":"#support","title":"\ud83d\udee0\ufe0f Support","text":"<p>For support and troubleshooting, please refer to the following resources:</p> <ul> <li>Issues: Report bugs, request features, or track existing issues on GitHub Issues Page.</li> <li>Discussions: Engage with the community, ask questions, and share ideas on GitHub Discussions Page.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to Zynk are highly welcome and greatly appreciated! Whether you are a seasoned developer or a newcomer, your input can help improve the project and make it better for everyone. </p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>Here are a few simple steps to get involved:</p> <ol> <li> <p>Fork the Repository:    Create a fork of the Zynk repository to make your changes. This allows you to work on your copy of the project and propose improvements or fixes.</p> </li> <li> <p>Develop Your Changes:    Work on your feature or bug fix in your forked repository. Make sure to write clear, concise code and provide helpful comments where necessary.</p> </li> <li> <p>Create a Pull Request:    Once you're satisfied with your changes, create a pull request (PR) to the main Zynk repository. Provide a detailed description of your changes and the motivation behind them.</p> </li> <li> <p>Collaborate and Iterate:    Engage with the community by responding to feedback on your pull request. We encourage open discussion and value every contribution, big or small.</p> </li> </ol>"},{"location":"contributing/#contribution-ideas","title":"Contribution Ideas","text":"<p>Here are a few ways you can contribute to Zynk:</p> <ul> <li> <p>Bug Reports:   If you encounter any issues or bugs while using Zynk, please report them through our Issue Tracker. Detailed bug reports help us identify and fix problems quickly.</p> </li> <li> <p>Feature Requests:   If you have ideas for new features or improvements, share them with the community through our Feature Request section. We are always open to innovative suggestions.</p> </li> <li> <p>Documentation Enhancements:   Clear and concise documentation is crucial for any project. You can help improve the Zynk documentation by fixing typos, adding examples, or clarifying explanations.</p> </li> <li> <p>Code Improvements:   Review the existing codebase and suggest optimizations or refactorings. Clean, efficient code is vital for the long-term success of the project.</p> </li> <li> <p>Test Cases:   Writing test cases is essential for ensuring code stability and functionality. You can contribute by adding new tests or improving existing ones.</p> </li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you need assistance or have questions about contributing, feel free to reach out to the Zynk community:</p> <ul> <li>Discussion Forum:   Join Discussion Forum to ask questions, and share ideas.</li> </ul>"},{"location":"data-types/","title":"Data types","text":"<p>Zynk currently supports only primitive data types, which are fundamental for basic computations and operations. Understanding these types is essential for writing efficient and correct programs. This section will cover the basic data types available in Zynk.</p>"},{"location":"data-types/#primitive-data-types","title":"Primitive Data Types","text":"<p>Zynk offers several primitive data types:</p> <ul> <li>Integer (<code>int</code>): Represents whole numbers without decimals.</li> <li>Float (<code>float</code>): Represents numbers with decimals.</li> <li>Bool (<code>bool</code>): Represents truth values, true or false (1 and 0).</li> <li>String (<code>String</code>): Represents sequences of characters.</li> <li>Null (<code>null</code>): Represents null value.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>To get Zynk up and running, you have two main options: downloading the precompiled interpreter or building from source. Follow the instructions below based on your preference.</p>"},{"location":"installation/#1-download-precompiled-interpreter-recommended","title":"1. Download Precompiled Interpreter (Recommended)","text":"<ol> <li>Go to the Releases page on GitHub.</li> <li>Download the latest release of interpreter suitable for your operating system.</li> <li>Extract the interpreter to your desired location.</li> </ol>"},{"location":"installation/#2-building-from-source","title":"2. Building from Source","text":"<p>If you prefer to build Zynk from source, follow these steps:</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before building Zynk, make sure you have the following software installed:</p> <ul> <li>CMake: A cross-platform build system generator. You can download it from the CMake website.</li> <li>A C++ Compiler: Such as GCC, Clang, or MSVC. Ensure that the compiler is compatible with C++17 or later.</li> <li>Git: For cloning the repository. You can download it from the Git website.</li> </ul>"},{"location":"installation/#build-instructions","title":"Build Instructions","text":"<ol> <li> <p>Clone the repository:</p> <p>To clone a specific version, replace <code>TAG_NAME</code> with the desired tag. You can find available tags on the Tags page on GitHub.</p> <pre><code>git clone --branch TAG_NAME --single-branch https://github.com/xXenvy/Zynk.git\n</code></pre> <p>Example for cloning the <code>v1.0.0</code> tag:</p> <pre><code>git clone --branch v1.0.0 --single-branch https://github.com/xXenvy/Zynk.git\n</code></pre> </li> <li> <p>Navigate to the project directory:</p> <p><code>cd Zynk</code></p> </li> <li> <p>Create a directory for temporary files (commonly named <code>build</code>):</p> <p><code>mkdir build</code></p> </li> <li> <p>Change to the build directory:</p> <p><code>cd build</code></p> </li> <li> <p>Configure CMake and build the project:</p> <p>First, run:</p> <p><code>cmake ..</code></p> <p>Then build the project:</p> <p><code>cmake --build . --config Release</code></p> </li> <li> <p>Once the compilation is complete, you can run the Zynk interpreter from the <code>src</code> directory:</p> <p><code>./Zynk</code></p> </li> </ol>"},{"location":"examples/basics/","title":"Basic Examples","text":"<p>Welcome to the Basic Examples section. Here, we showcase fundamental code snippets to help you get started with Zynk. </p>"},{"location":"examples/basics/#example-1-basic-variables-and-output","title":"Example 1: Basic Variables and Output","text":"<p>This example demonstrates the use of variables and basic output functions.</p> <pre><code>def main() {\n    var x: int = 1;\n    var y: String = \"elo\";\n    println(x);\n    println(y);\n}\nmain();\n</code></pre>"},{"location":"examples/basics/#example-2-control-flow-with-loops-and-conditionals","title":"Example 2: Control Flow with Loops and Conditionals","text":"<p>This example shows how to use loops and conditionals in Zynk.</p> <pre><code>def main() {\n    var x: int = 1;\n\n    while(true) {\n        if(x == 1) {\n            break;\n        }\n    }\n}\nmain();\n</code></pre>"},{"location":"examples/basics/#example-3-nested-functions","title":"Example 3: Nested Functions","text":"<p>This example demonstrates defining and calling functions, including nested functions.</p> <pre><code>def main() {\n    var number: int = 1;\n\n    def displayNumber() {\n        println(number);\n        var multiplier: float = 1.5;\n        def calculateAndPrint() {\n            println(number * multiplier);\n        }\n        calculateAndPrint();\n    }\n    displayNumber();\n}\nmain();\n</code></pre>"},{"location":"examples/hello_world/","title":"Write your first program","text":"<p>Welcome to the \"Hello, World!\" tutorial for Zynk. In this guide, we'll create a simple Zynk program that prints \"Hello, World!\" to the console. Follow the steps below to get started.</p>"},{"location":"examples/hello_world/#1-create-a-new-zynk-file","title":"1. Create a new Zynk file","text":"<p>First, you'll need to create a new file with a <code>.zk</code> extension. This file will contain your Zynk code.</p> <ol> <li>Open your favorite text editor or IDE.</li> <li>Create a new file and save it as <code>hello.zk</code>.</li> </ol>"},{"location":"examples/hello_world/#2-write-your-zynk-program","title":"2. Write your Zynk program","text":"<p>In the <code>hello.zk</code> file, write the following Zynk code:</p> <pre><code>println(\"Hello, World!\");\n</code></pre>"},{"location":"examples/hello_world/#explanation","title":"Explanation","text":"<ul> <li><code>println(\"Hello, World!\");</code>: This line of code calls the <code>println</code> function, which outputs the string <code>\"Hello, World!\"</code> to the console followed by a newline character.</li> </ul>"},{"location":"examples/hello_world/#3-run-your-zynk-program","title":"3. Run your Zynk program","text":"<p>To run your Zynk program, follow these steps:</p> <ol> <li>Open a Terminal or Command Prompt.</li> <li> <p>Navigate to the directory containing your <code>hello.zk</code> file. For example:</p> <p><code>cd path/to/your/directory</code></p> </li> <li> <p>Execute the Zynk interpreter with your file as an argument:</p> <p><code>./Zynk hello.zk</code></p> </li> </ol>"},{"location":"examples/hello_world/#expected-output","title":"Expected Output","text":"<p>When you run the program, you should see the following output:</p> <pre><code>Hello, World!\n</code></pre>"},{"location":"examples/hello_world/#4-troubleshooting","title":"4. Troubleshooting","text":"<p>If you encounter any issues, make sure of the following:</p> <ul> <li>The Zynk interpreter is correctly installed and located in your system's PATH.</li> <li>The file extension is <code>.zk</code> and the code is properly written.</li> <li>You are running the command from the directory where <code>hello.zk</code> is located.</li> </ul>"},{"location":"examples/hello_world/#next-steps","title":"Next Steps","text":"<p>Congratulations on writing your first Zynk program! Here are some suggestions for what to do next:</p> <ul> <li>Explore more Zynk functions and syntax by referring to the Language Reference section of the documentation.</li> <li>Experiment with more complex programs and learn about variables, loops, and functions in Zynk.</li> </ul> <p>Happy coding!</p>"}]}